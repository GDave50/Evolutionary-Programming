(load "individual.l")
(load "population.l")
(load "rbg.l")

;; TASK 11 (partial)

(defconstant *nr-generations* 20)

; Generates the next generation
(defmethod next-generation ((cp population) &aux np)
  (setf np (empty-population cp))
  (perform-copies cp np)
  (perform-crossovers cp np)
  np
)

; The genetic algorithm demo
(defmethod ga-text-demo (&aux p)
  (format t "THE WORLD IS RED~%~%")
  (setf *fitness* #'fitness-r)
  (setf p (initial-population))
  (terpri)
  (summarize p)
  (dotimes (i *nr-generations*)
    (setf p (next-generation p))
    (check-average p)
  )
  (terpri)
  (summarize p)
  (format t "THE WORLD IS BLUE~%~%")
  (setf *fitness* #'fitness-b)
  (dotimes (i *nr-generations*)
    (setf p (next-generation p))
    (check-average p)
  )
  (terpri)
  (summarize p)
  (format t "THE WORLD IS GREEN~%~%")
  (setf *fitness* #'fitness-g)
  (dotimes (i *nr-generations*)
    (setf p (next-generation p))
    (check-average p)
  )
  (terpri)
  (summarize p)
)
